<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python多线程</title>
      <link href="/2022/04/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/04/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>​      如何在Python程序中实现多线程——即并行运行多个线程，这里我们用到threading模块。</p><h1>初始化</h1><p>​     欲处理多个线程，首先我们需要创建线程——即Thread对象，那么如何创建？我们可以参考Python官方文档。</p><blockquote><p>Help on class Thread in module threading:</p><p>class <strong>Thread</strong>(builtins.object)</p><p>| Thread(group=None, target=None, name=None, args=(), kwargs=None, *, daemon=None)</p><p>| A class that represents a thread of control.</p><p>| This class can be safely subclassed in a limited fashion. There are two ways</p><p>| to specify the activity: by passing a callable object to the constructor, or</p><p>| by overriding the run() method in a subclass.</p></blockquote><p>​      也就是说有两种方式：</p><ol><li>将可调用对象传递给构造函数——直接创建Thread对象</li><li>在子类中复写run函数——自定义类继承Thread</li></ol><h2 id="直接创建Thread对象">直接创建Thread对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_job</span>():</span></span><br><span class="line">  ...</span><br><span class="line">thread1 = threading.Thread(target = thread_job)</span><br><span class="line">thread1.start()</span><br></pre></td></tr></table></figure><p>​      首先我们来研究一下Thread对象有哪些属性：</p><blockquote><p>| <strong><strong>init</strong></strong>(self, group=None, target=None, name=None, args=(), kwargs=None, *, daemon=None)</p><p>|   This constructor should always be called with keyword arguments. Arguments are:</p><p>|</p><p>|   <em>group</em> should be None; reserved for future extension when a ThreadGroup</p><p>|   class is implemented.</p><p>|   <em>target</em> is the callable object to be invoked by the run()</p><p>|   method. Defaults to None, meaning nothing is called.</p><p>|   <em>name</em> is the thread name. By default, a unique name is constructed of</p><p>|   the form “Thread-N” where N is a small decimal number.</p><p>|   <em>args</em> is the argument tuple for the target invocation. Defaults to ().</p><p>|   <em>kwargs</em> is a dictionary of keyword arguments for the target</p><p>|   invocation. Defaults to {}.</p></blockquote><p>值得关注的是target属性，它是Thread类的run函数的调用对象。——所以其实两种方式思路是一样的。</p><p>如果你的target想调用的函数有参数，输入进arg就好。（target相当于一个索引，所以target就是函数名）</p><h2 id="自定义类继承">自定义类继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment"># 从threading.Thread继承定义一个新的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mythread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ...</span>):</span></span><br><span class="line">    threading.Thread.__init__(self)</span><br><span class="line">    ...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">    ...</span><br><span class="line">thread1 = mythread()</span><br><span class="line">thread1.start()</span><br></pre></td></tr></table></figure><p>这里需要注意，一般情况下仅需要复写__init__和run两个函数。</p><h1>使用</h1><ol><li>threading 模块提供的方法：</li></ol><ul><li><strong>threading.currentThread():</strong> 返回当前的线程变量。</li><li><strong>threading.enumerate():</strong> 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li><li><strong>threading.activeCount():</strong> 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</li></ul><ol start="2"><li>Thread类提供了以下方法:</li></ol><ul><li><strong>run():</strong> 用以表示线程活动的方法。</li><li><strong>start():</strong> 启动线程活动。</li><li><strong>join([time]):</strong> 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</li><li><strong>isAlive():</strong> 返回线程是否活动的。</li><li><strong>getName():</strong> 返回线程名。</li><li><strong>setName():</strong> 设置线程名。</li></ul><p>这里需要关注的是join，它可以阻塞自身所在线程，以达到控制线程先后进行的目的。</p><p>通俗解释一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">thread1.start()</span><br><span class="line">thread1.join()</span><br><span class="line">thread2.start()</span><br><span class="line"><span class="built_in">print</span>（‘运行结束‘）</span><br></pre></td></tr></table></figure><p>意思就是说，thread1结束之前，thread2包括print是不能开始的。</p><h1>线程同步</h1><p>​       当对同一数据进行处理时，线程之间应该是有先后顺序的，这样才能保证数据的同步性，如果上一个线程没修改完下一个线程就开始修改，就会出现大问题。如何解决呢？——锁！</p><p>​       锁是threading类提供的对象，它有两个状态——锁定和释放。当一个线程想要进行一步被加了锁的工作时，它必须获得锁定——锁定这个工作，如果这个工作被另一个线程锁定了，那必须得等到另一个线程释放之后才能获得锁定并开始工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span>():</span></span><br><span class="line">  lock.acquire()</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;job1&#x27;</span>) <span class="comment"># 只是举个例子，应用时这里的功能应该复杂许多</span></span><br><span class="line">  lock.release()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span>():</span></span><br><span class="line">  lock.acquire()</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;job2&#x27;</span>)</span><br><span class="line">  lock.release()</span><br><span class="line">  </span><br><span class="line">threads = []</span><br><span class="line">thread1 = threading.Thread(target = job1)</span><br><span class="line">thread2 = threading.Thread(target = job2)</span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br><span class="line">threads.append(thread1)</span><br><span class="line">threads.append(thread2)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">  t.join()</span><br><span class="line"><span class="built_in">print</span>(退出主线程)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一上总结与反思</title>
      <link href="/2022/03/25/%E5%A4%A7%E4%B8%80%E4%B8%8A%E6%80%BB%E7%BB%93%E4%B8%8E%E5%8F%8D%E6%80%9D/"/>
      <url>/2022/03/25/%E5%A4%A7%E4%B8%80%E4%B8%8A%E6%80%BB%E7%BB%93%E4%B8%8E%E5%8F%8D%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<h1>分析</h1><p>​     周五晚上坐在图书馆，有不少ddl，但是想来想去，还是得给上个学期做个总结，我想这是有意义的。</p><p>​      简况：高数 87    C 99    思政 95</p><p>​                  军理 95    体育77   形策 90</p><p>​      均分在班级第四。很显然，这不是一份满意，甚至说是一份令人挺难过的答卷。</p><p>​     高数87分——很低。仔细想来，自己失败的原因也很明显，而却陷入了自大，自我欺骗的陷阱。本就没有很好掌握的学科，你，又有什么理由去相信自己能95+？这是很可笑的。那原因何在？</p><p>​     上学期的自己一直忙忙碌碌，误以为自己很勤奋，别人很懒惰，自己学习效率高，但事实是——平时花的时间根本不在学习上，辩论，星火杯，ppt等作业。而之所以去图书馆，完全是因为有ddl的因素，而去的勤，待到很晚——效率低而已。</p><p>所以思政军理在考前花时间突击背书取得了还不错的成绩，而高数——显而易见，是没有用的。至于C语言——一份大作业一直在心里，拖到最后也没有做，这，不应该是学习的态度。<br>更令人觉得恐怖的事情：</p><p>庸庸碌碌的上学期，却自以为自律。</p><p>​    从没有一次因为想钻研而去图书馆学习，从没有一次在课后看上课没搞懂的例题，细思极恐。你真的很优秀吗？</p><p>​    从没有坚持做过什么提升自己的事情 实际上这样的事情可做的有很多。背单词，学习新的语言，学习前端后端，学习算法，各种竞赛，matlab，latex，数模，很可惜，没有，虽然都很有必要，但因为太忙，因为忙完太累，因为其他人摆。</p><p>新的学期，大物，线代，高数，python。可以说，自己学的都很浅。然而，又有后端任务，又有小挑，又有六级，又有数模，又有大英。上学期重来一次吗？</p><h1>改变</h1><p>制定计划并严格遵守——破除幻象的唯一办法。</p><ol><li><p>截止周五，写完作业，完成项目任务。</p></li><li><p>每两天背一章六级词汇，跑一次三千米。</p></li><li><p>周六早上是独立的能力拓展时间。</p></li><li><p>周六下午准备竞赛。</p></li><li><p>周日上午对上周学习内容复盘。</p></li><li><p>周日下午对下周学习内容预习。</p></li></ol><h1>打卡</h1><p>习惯初期的巩固体系</p><ul><li>[ ] 四月份第一周</li><li>[ ] 四月份第二周</li><li>[ ] 四月份第三周</li><li>[ ] 四月份第四周</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题</title>
      <link href="/2022/03/03/%E5%88%B7%E9%A2%98/"/>
      <url>/2022/03/03/%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1>赎金信</h1><h2 id="题目">题目</h2><p>给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。</p><p>如果可以，返回 true ；否则返回 false 。</p><p>magazine 中的每个字符只能在 ransomNote 中使用一次。</p><h2 id="题解">题解</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canConstruct</span><span class="params">(<span class="keyword">char</span> * ransomNote, <span class="keyword">char</span> * magazine)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *p1=magazine;</span><br><span class="line">    <span class="keyword">while</span>(*p1!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        cnt[*p1-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> *p2=ransomNote;</span><br><span class="line">    <span class="keyword">while</span>(*p2!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        cnt[*p2-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        <span class="keyword">if</span>(cnt[*p2-<span class="string">&#x27;a&#x27;</span>]&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>罗马数字转整数</h1><h2 id="题目-2">题目</h2><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。</p><h2 id="题解-2">题解</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="keyword">char</span> * s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> rom[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">  rom[<span class="string">&#x27;I&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">  rom[<span class="string">&#x27;V&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">5</span>;</span><br><span class="line">  rom[<span class="string">&#x27;X&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">  rom[<span class="string">&#x27;L&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">  rom[<span class="string">&#x27;C&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line">  rom[<span class="string">&#x27;D&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">500</span>;</span><br><span class="line">  rom[<span class="string">&#x27;M&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(*(s+<span class="number">1</span>)==<span class="string">&#x27;\0&#x27;</span>) sum+=rom[*s-<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(rom[*s-<span class="string">&#x27;A&#x27;</span>]&lt;rom[*(s+<span class="number">1</span>)-<span class="string">&#x27;A&#x27;</span>]) sum-=rom[*s-<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">      <span class="keyword">else</span> sum+=rom[*s-<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">     s++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>螺旋方阵</h1><h2 id="题目-3">题目</h2><p>螺旋方阵是指一个呈螺旋状的矩阵，它的左上角元素为1，由第一行开始按从左到右，从上到下，从从右向左，从下到上的顺序递增填充矩阵，直到矩阵填充完毕，下图所示是一个5*5阶的螺旋方阵。输入螺旋方阵的阶数N，按行输出该螺旋方阵。</p><p><img src="/Users/jikangye/blog/source/_posts/img/wps80PKx9.jpg" alt="img"></p><p><em><strong>*输入说明*</strong></em></p><p>输入一个正整数N(1&lt;N&lt;=100)。</p><p><em><strong>*输出说明*</strong></em></p><p>逐行输出N阶螺旋方阵的元素，元素之间用空格分隔。</p><h2 id="题解-3">题解</h2><p>​       在尝试了很多想法之后，发现写出最工整的代码还是需要简单明晰的思路，以及在过程中对变量的把握。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,num=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> r1=<span class="number">1</span>,r2=n,c1=<span class="number">1</span>,c2=n;</span><br><span class="line">    <span class="keyword">int</span> x,y=r1;</span><br><span class="line">    <span class="keyword">while</span>(num!=n*n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(x=c1;x&lt;=c2;x++)&#123;</span><br><span class="line">            m[y][x]=num;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        r1++;</span><br><span class="line">        x--;</span><br><span class="line">        <span class="keyword">for</span>(y=r1;y&lt;=r2;y++)&#123;</span><br><span class="line">            m[y][x]=num++;</span><br><span class="line">        &#125;</span><br><span class="line">        c2--;</span><br><span class="line">        y--;</span><br><span class="line">        <span class="keyword">for</span>(x=c2;x&gt;=c1;x--)&#123;</span><br><span class="line">            m[y][x]=num++;</span><br><span class="line">        &#125;</span><br><span class="line">        r2--;</span><br><span class="line">        x++;</span><br><span class="line">        <span class="keyword">for</span>(y=r2;y&gt;=r1;y--)&#123;</span><br><span class="line">            m[y][x]=num++;</span><br><span class="line">        &#125;</span><br><span class="line">        c1++;</span><br><span class="line">        y++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,m[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>进制转换</h1><h2 id="题目-4">题目</h2><p><em><strong>*问题描述*</strong></em></p><p>将十进制数转为其他进制数输出。</p><p><em><strong>*输入说明*</strong></em></p><p>输入两个整数，分别表示十进制下的数字a(0≤a≤(2^31)-1)和进制N(2≤N≤9)，整数之间使用空格分隔。</p><h2 id="题解-4">题解</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,N,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">while</span>(a)&#123;</span><br><span class="line">        n[cnt++]=a%N;</span><br><span class="line">        a/=N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        num=num*<span class="number">10</span>+n[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>子串统计</h1><h2 id="题目-5">题目</h2><p><em><strong>*问题描述*</strong></em></p><p>输入两个字符串，分别称为母串和子串。统计子串在母串中出现的次数和位置。注意子串可以重叠，见输入样例2。</p><p><em><strong>*输入说明*</strong></em></p><p>输入分为两行，第一行为母串，第二行为子串。母串和子串的长度都不超过100。</p><p><em><strong>*输出说明*</strong></em></p><p>输出子串在母串中出现的次数，并按出现次序输出每次子串在母串中出现时，子串第一个字符在母串中的位置（位置从0开始计算）。</p><h2 id="题解-5">题解</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rec[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> mom[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> son[<span class="number">100</span>];</span><br><span class="line">    fgets(mom,<span class="number">100</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    fgets(son,<span class="number">100</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len=<span class="built_in">strlen</span>(son);<span class="comment">//fets会将回车读取，len比实际大一</span></span><br><span class="line">    <span class="keyword">char</span> *p=mom;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*p!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strncmp</span>(p,son,len<span class="number">-1</span>)==<span class="number">0</span>) rec[cnt++]=num;</span><br><span class="line">        p++;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,rec[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCD与LCM问题</title>
      <link href="/2022/02/26/GCD%E4%B8%8ELCM%E9%97%AE%E9%A2%98/"/>
      <url>/2022/02/26/GCD%E4%B8%8ELCM%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1>目标</h1><p>给出两数 求最大公约数和最小公倍数</p><h1>算法</h1><ol><li><p>最小公倍数等于两数相乘除最大公约数</p></li><li><p>辗转相除法</p></li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd(a,b)=gcd(a,a\, mod\,  b) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span></span></p><p>欲求最大公约数，即利用此式不断进行辗转相除，若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">gcd(a,b)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，则b为最大公约数</p><h1>代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(a%b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> c=a%b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大公约数：%d\n&quot;</span>,gcd(x,y));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小公倍数：%d&quot;</span>,x*y/gcd(x,y));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计划</title>
      <link href="/2021/12/30/%E8%AE%A1%E5%88%92/"/>
      <url>/2021/12/30/%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1>博客计划更新日志</h1><ul><li>[ ] 高数上框架  1.1</li><li>[ ] 高数下框架 1.3</li><li>[ ] 高数刷题加整理 1.4</li><li>[ ] 指针拓展 1.8</li><li>[ ] 动态规划 （根据期末考试来定）</li><li>[ ] 贪心 （同上）</li><li>[ ] STL之string （同上）</li></ul><h1>个人学习</h1><h2 id="周">周</h2><ul><li>[ ] 贪吃蛇游戏</li><li>[ ] sd-wlan远程办公方案</li><li>[ ] 军理复习</li><li>[ ] 思政客观题复习</li><li>[ ] 思政主观题背诵</li><li>[ ] 高数复习</li></ul><h2 id="日">日</h2><h3 id="12-31">12.31</h3><ul><li><p>[x] P337，346</p></li><li><p>[x] xdoj120分</p></li><li><p>[x] P354</p></li><li><p>[x] 背书</p></li><li><p>[ ] 拟写高数上/下框架</p></li></ul><h3 id="1-3">1.3</h3><ul><li>[x] 微分方程回顾</li><li>[ ] 贪吃蛇1/4(clion不知道怎么操控控制台 明天装虚拟机用vs试试)</li><li>[x] SD-WAN</li><li>[x] 军理再过一遍</li></ul><h3 id="1-4">1.4</h3><ul><li>[ ] 高数下框架</li><li>[ ] 装虚拟机 贪食蛇欢迎界面</li><li>[ ] 思政主观题1/3</li><li>[ ] C语言</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 人间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件</title>
      <link href="/2021/12/30/%E6%96%87%E4%BB%B6/"/>
      <url>/2021/12/30/%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1>基本概念</h1><h2 id="什么是文件">什么是文件</h2><p>定义：存放在外部介质，以文件名为标识符的数据集。</p><p>分类：</p><ul><li>普通文件：驻留在磁盘或外部介质的有序数据集，比如：源文件、目标文件、可执行程序、待输入处理的原始数据、输出结果</li><li>设备文件：与主机相连的各种外部设备，比如：显示器（标准输出文件）、打印机、键盘（标准输入文件）</li></ul><h2 id="文件类型（I-0流）">文件类型（I/0流）</h2><p>文件分类（流分类）：</p><ul><li>ASCII文件（文本文件）：每个字符对应一个字节，用来存放对应ASCII码 可按字符显示</li><li>二进制文件：按二进制编码方式存放文件 不可直接显示内容 适用于大文件存储（所占字节少）</li></ul><p>注：输入输出流的开始和结束只由程序控制而不受物理符号的限制，因此成为流文件。</p><p>C语言的三个标准流：</p><ul><li>stdin：标准输入流 读取输入数据 指向键盘缓冲区</li><li>stdout：标准输出流 输出数据 指向控制台缓冲区</li><li>stderr：标准错误流 输出错误信息 指向控制台缓冲区</li></ul><p>三者都可以重定向 后文有介绍</p><h1>文件操作</h1><p>如何对文件进行操作呢？文件是数据集，对它操作的核心在于指针的使用，详见下文。</p><h2 id="基本步骤">基本步骤</h2><p>Step1:打开文件</p><p>Step2:读写文件</p><p>Step3:关闭文件</p><h2 id="打开文件">打开文件</h2><h3 id="文件指针">文件指针</h3><p>指向文件的指针变量叫作文件指针，<strong>对文件的所有操作都需要通过文件指针</strong>。</p><p>声明：FILE *指针变量标识符</p><p>需要理解FILE是一个系统定义的结构体变量 用来存放文件有关信息 这样才可以理解接下来的文件操作函数。</p><h3 id="文件打开函数">文件打开函数</h3><p><code>FILE *fopen(const char *filename,const char *mode);</code></p><p>filename: 需要打开的文件名</p><p>​                 格式：绝对路径或相对路径（可执行程序和文件需在同一目录下）</p><p>mode: 文件打开模式</p><p>返回值：返回指向该被打开文件的指针</p><h3 id="文件打开模式">文件打开模式</h3><table><thead><tr><th>mode</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td>“r”</td><td style="text-align:left">只读文件，文件不存在则打开失败</td></tr><tr><td>“w”</td><td style="text-align:left">只写文件，清空文件，文件存在则覆盖，不存在则新建</td></tr><tr><td>“a”</td><td style="text-align:left">追加，文件存在则从结尾往后写，不存在则新建</td></tr><tr><td>“r+”</td><td style="text-align:left">可读写，不清空文件，文件不存在则打开失败，文件存在则覆盖</td></tr><tr><td>“w+”</td><td style="text-align:left">可读写，其他同w</td></tr><tr><td>“a+”</td><td style="text-align:left">可读写，其他同a</td></tr><tr><td>&quot;b’’</td><td style="text-align:left">以二进制方式打开，加在上面几种后面</td></tr></tbody></table><h2 id="关闭文件">关闭文件</h2><p>函数原型：<code>int fclose(FILE *stream)</code></p><p>返回值：成功则返回0，失败返回EOF（-1）</p><h2 id="读写文件">读写文件</h2><h3 id="字符处理">字符处理</h3><ul><li>读取一个字符</li></ul><p>函数原型：<code>int fgetc(FILE *stream)//stream是文件指针</code></p><p>返回值：读到的字符，若读取失败返回EOF</p><ul><li>写入一个字符</li></ul><p>函数原型：<code>int fputc(int char,FILE *stream)</code></p><p>注：字符以其对应的int值（ASCII码）传递，所以为int类型（当然我们不用管）</p><p>返回值：写入的字符，若写入失败返回EOF</p><p>例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  FILE *fpr=fopen(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  FILE *fpw=fopen(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="keyword">char</span> ch;</span><br><span class="line">  <span class="keyword">if</span>(fpr==EOF||fpw==EOF)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;open file error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>((ch=fgetc(fpr))!=EOF)&#123;</span><br><span class="line">    fputc(ch,fpw);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fpr);</span><br><span class="line">  fclose(fpw);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串处理">字符串处理</h3><ul><li>读取一行字符</li></ul><p>函数原型：<code> char *fgets(char *string,int n,FILE *stream)//n为最多读取字符数</code></p><p>返回值：返回参数string，若读取失败返回==NULL==</p><p>注意：最后一个字符为’\0’,所以最多读取n-1个字符</p><p>​            若读取到’\n’,读取过程结束，'\n’也被放入读取字符串</p><ul><li>写入一行字符</li></ul><p>函数原型：<code> int fputs(const char *string,FILE *stream)</code></p><p>返回值：非负整数 写入失败则返回EOF</p><p>注意：字符串结束’\0’不会写入文件</p><p>例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  FILE *fpr=fopen(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  FILE *fpw=fopen(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">if</span>(fpr==<span class="literal">NULL</span>||fpw==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;open file error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(fgets(buf,<span class="number">100</span>,fpr)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(buf,fpw);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fpr);</span><br><span class="line">  fclose(fpw);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格式化处理">格式化处理</h3><ul><li>文本文件格式化输入</li></ul><p>函数原型：<code>int fscanf(FILE*stream,const char*format,[argument])</code></p><p>format：格式控制字符串</p><p>其他参数：存储读到的数据，格式为指针（地址）</p><p>返回值：正确读到的数据个数，读取失败返回EOF</p><p><code> fscanf(fp,&quot;%d&quot;,&amp;n)</code></p><ul><li>文本文件格式化输出</li></ul><p>函数原型：<code>int fprintf(FILE*stream,const char*format,[argument])</code></p><p>返回值：正确写入的数据个数，读取失败返回EOF</p><p><code> fprintf(fp,&quot;%d&quot;,x)</code></p><h1>流重定向</h1><h2 id="什么是流重定向">什么是流重定向</h2><p>流是流式文件，所以定向的是文件，注意：设备文件和普通文件都称作文件。</p><h2 id="流重定向的方法">流重定向的方法</h2><h3 id="命令行中重定向流">命令行中重定向流</h3><p>stdin重定向方法：可执行程序名&lt;文件名</p><p>stdout重定向方法：可执行程序名&gt;文件名</p><h3 id="程序中重定向流">程序中重定向流</h3><p>我们需要用到freopen函数</p><p>函数原型：<code> FILE*freopen(char *filename,char *mode,FILE *fp)</code></p><p>filename:重定向的文件名</p><p>mode：文件打开模式</p><p>fp:这里的fp指向被重定向的流 如stdin</p><p>例：<code>freopen(&quot;input.txt&quot;,&quot;r&quot;,&quot;stdin)</code></p><p>​        <code>freopen(&quot;output.txt&quot;,&quot;w&quot;,&quot;stdout&quot;)</code></p><p>———————————————————————————————————</p><p>为什么想起来整理文件呢？因为写图灵机模拟程序要用到…</p><p>如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> status[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> input;</span><br><span class="line">    <span class="keyword">char</span> output;</span><br><span class="line">    <span class="keyword">char</span> move;</span><br><span class="line">    <span class="keyword">char</span> change[<span class="number">10</span>];</span><br><span class="line">&#125;P;</span><br><span class="line"><span class="keyword">char</span> result[<span class="number">100</span>];</span><br><span class="line">P p1[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">char</span> mach[<span class="number">10</span>]=<span class="string">&quot;waiting&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mov</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">&#x27;L&#x27;</span>) idx++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="string">&#x27;R&#x27;</span>) idx--;</span><br><span class="line">&#125;<span class="comment">//进行读写头移动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chan</span><span class="params">(<span class="keyword">char</span> *ch)</span></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(mach,ch);</span><br><span class="line">&#125;<span class="comment">//进行状态改变</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span> *m,<span class="keyword">char</span> *r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(m,p1[i].status)==<span class="number">0</span>&amp;&amp;r[k]==p1[i].input) &#123;</span><br><span class="line">            mov(p1[i].move,k);</span><br><span class="line">            chan(p1[i].change);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//与指令集对比并操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp=fopen(<span class="string">&quot;program.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="comment">//假定指令集文件为program.txt</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">&quot;%s&quot;</span>,p1[i].status)!=EOF)&#123;</span><br><span class="line">        <span class="built_in">fscanf</span>(fp,<span class="string">&quot;%s %c %c %c %s&quot;</span>,p1[i].status,&amp;p1[i].input,&amp;p1[i].output,&amp;p1[i].move,p1[i].change);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,data);</span><br><span class="line">    <span class="built_in">strcpy</span>(result,data);<span class="comment">//输入</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">strcpy</span>(mach,<span class="string">&quot;stop&quot;</span>))&#123;</span><br><span class="line">        solve(mach,result);</span><br><span class="line">    &#125;<span class="comment">//逐字符更改</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南方周末2022新年献词</title>
      <link href="/2021/12/29/%E5%8D%97%E6%96%B9%E5%91%A8%E6%9C%AB2022%E6%96%B0%E5%B9%B4%E7%8C%AE%E8%AF%8D/"/>
      <url>/2021/12/29/%E5%8D%97%E6%96%B9%E5%91%A8%E6%9C%AB2022%E6%96%B0%E5%B9%B4%E7%8C%AE%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h1>落子无悔，抉择本身就是向前</h1><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxufia707ij30qo0hsabq.jpg" alt="2021年12月10日8时11分，实践六号05组卫星发射升空。 （新华社 汪江波/图）"></p><p>没有谁想到，为这一年中国人的日常留下最真实画像的，是一份份“流调”。</p><p>52岁的绍兴出租车司机，多日里每天跑车20小时；出差徐州的男人，日复一日调试设备，晚上吃麦当劳十分钟度过44岁生日；45岁的南京妈妈，除在机场做保洁外，其余全部是带孩子去各种培训班的足迹；35岁的爸爸，晚上在东莞居住，早上送完孩子后又大巴连地铁赶去深圳打工；沈阳大爷的鸡架子、广州阿婆的早茶、扬州天天麻将馆、云南多位八旬老人旅游到内蒙古额济纳旗，让疫中生活现出地方风情；而瑞丽居民的困顿、伊犁游客的窘迫、西安全城的封控，让人耿耿，有如身受……</p><p>那些粗粝的细节，那些奋力生活的轨迹，那些单调重复里的爱、责任和坚韧，真实映照着一个个普通中国人的日常，比滚动播报的全球新冠疫情数字更加牵动人心。</p><p>但疫情终究改变了每一个人的日常，时间之矢已无法倒转，世界再也回不到从前。多少坚固的东西都在烟消云散啊，那些耳边响起的崩裂声，仿佛低徊于时光深处的惊雷。</p><p>旧的一页悄然翻篇，没有正式道别。新的世界加速拼图，不会友情提示。普罗大众的日常之上，是与新冠疫情相迭的百年变局在交织演变，历史正在流淌、奔腾、冲刷，淘荡出新的河床，镌刻出新的走向。</p><p>外太空空间站新建起“三室一厅”，元宇宙模糊了虚拟与现实，时空概念在多个维度被刷新；“史上最大龙卷风”，“千年一遇暴雪”，纽约首遇暴洪，欧洲最热夏天，全球气候极端化让现实世界运行逻辑难以为继；中东难民冲击脆弱的欧洲联盟，美军急切飞离阿富汗泥潭，俄乌竞相屯兵，巴以飞弹对决，大国角力让全球关系空前承压。</p><p>陌生的图景，陌生的语言，陌生的节奏，可谁能阻止这滚滚大潮？猎猎风起，我们已站在百年未有之大时代路口。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxufiy0dt2j30qo0hstbn.jpg" alt="2021年11月28日，山东省烟台市一处海滨沙滩，一队晨练的大学生正在跑步。 （视觉中国/图）"></p><p>何处是生门，何方有出路？谁能争得先机，谁能笑到最后？唯主动破局，果断开局，抉方向，择先机，方能萃取绵绵不断的力量。</p><p>抉择当先，要在当下。</p><p>抉择是亘古至今的召唤，谛听着生命固有的咏叹。君子居易以俟命，小人行险以徼幸。</p><p>抉择是坚忍持久的爱，是为自己为亲人为路人为家与国的明天筹谋。</p><p>抉择是责任担当，是纵然身在沙漠，也要变身骆驼，不为鸵鸟。</p><p>抉择是勇气，是直面惨淡后的奋起，是横下心接纳陌生、改变和结果。</p><p>抉择是较量，是狠狠扼住命运的咽喉而且还要以堂堂正正的姿势。</p><p>抉择是新生，是涅槃后更为强壮的灵魂，是摧枯拉朽、洗髓换骨后的轻盈如燕，是从悲观中升华出的达观，是最终化成的不老青山。</p><p>人之抉择，难以处处顺滑，但求不做浮萍。而每一个你我，绝不躺平，绝不由天，要努力在时代与命运的罗盘上刻下印记，以千万个一粟聚成洪流，汇于沧海。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gxufj7mpqtj30qo0ezagc.jpg" alt="江西省九江市湖口县均桥镇新庄村三组村民正在晾晒刚刚收割的晚稻。 （IC photo/图）"></p><p>回望这一年，百年前那艘红船上的抉择，为中华民族带来第一个百年奋斗目标的实现、第二个百年奋斗新征程的启航；“共同富裕”浙江示范，“三次分配”全网流行；新选制香港落地，个人信息保护、反垄断纷纷亮剑；房产税试点已楼梯吱嘎响，“双碳”承诺描绘出绿水青山；“全面三孩”光速落地，“双减政策”重磅出击；互联网告别狂飙突进，“劣迹艺人”一夜褪尽光环……</p><p>也许，要到10年、30年或者50年后，这些大事件大抉择的所有意蕴才能完全彰显，但你我皆已是局中人。每一个人既被抉择，又在抉择。就在眼前，就在此时。</p><p>抉择当然有代价，尤在这巨变的当下。抉择重如千钧，更需要有心者不抛弃、有力者不放弃，一起扛起时代的那粒灰。</p><p>你有你的抉择，我有我的抉择，家有家的抉择，国有国的抉择，文明有文明的抉择，历史有历史的抉择。亿万个抉择汇聚，世界方显参差多样，宇宙才真正博大浩渺。但无论大小，每一次抉择，都是一次主动求变，都期待一场苦尽甘来。正如每一棵破土的新芽，都带着穿透时光的倔强。</p><p>在这条路上，我们守望相助，给灰心者做光，给失味者做盐。让软弱者挺起胸膛，让畏葸者不再彷徨，帮失意者重拾信心，向溺水者伸手施援，给悲恸者抚慰拥抱，令疲惫者沉入酣眠，为无家可归者提供最后的依靠。这是我们共同的抉择。</p><p>落子无悔，抉择本身就是向前。</p><p>从一个变局闯入另一个变局，从一个时空通关到另一个时空，抉择难分福祸，但求无愧天地；抉择无论成败，背影自带光芒。</p><p>虽千万人，吾往矣！</p><p>愿这一刻，时雪洗去尘垢，惠风拂走阴翳。沐浴和煦阳光，聆听万物呼吸。时光酿成甘酒，属于每一个正奋斗抉择的你。</p><p>祝你新年快乐。</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体</title>
      <link href="/2021/12/27/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2021/12/27/%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1>定义</h1><h2 id="声明结构体">声明结构体</h2><ol><li><p>基本类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span>       <span class="comment">//complex为新类型名称</span></span><br><span class="line">    <span class="keyword">double</span> real;</span><br><span class="line">    <span class="keyword">double</span> image;</span><br><span class="line">&#125;;<span class="comment">//复数</span></span><br></pre></td></tr></table></figure></li><li><p>数组类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">&#125;;<span class="comment">//学生信息</span></span><br></pre></td></tr></table></figure></li><li><p>结构体类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">      <span class="keyword">int</span> value;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">next</span>;</span><span class="comment">//结构体变量内存未知，而指针变量内存一定为4个     字节，不能用struct node next;</span></span><br><span class="line">&#125;;<span class="comment">//链表</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="定义结构体变量">定义结构体变量</h2><ol><li><p>定义结构体时声明变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">&#125;st1,st2;</span><br></pre></td></tr></table></figure></li><li><p>在程序其他地方声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">st1</span>,<span class="title">st2</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">st3</span>[10];</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>typedef</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">&#125;STU;<span class="comment">//typedef也可用于定义基本类型，如unsigned int</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    STU st1,st2;</span><br><span class="line">    STU st3[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="结构体嵌套">结构体嵌套</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> id[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> year;<span class="comment">//引用时即为STU.birthday.year</span></span><br><span class="line">        <span class="keyword">int</span> month;</span><br><span class="line">        <span class="keyword">int</span> day;</span><br><span class="line">    &#125;birthday;</span><br><span class="line">&#125;STU;  <span class="comment">//STU为typedef定义的简单名称</span></span><br><span class="line"><span class="comment">//是不是觉得有点怪怪的 因为我把struct后面的定义类型名省略了，加不加都可（之前不可以省略是因为需要用类型名去声明变量，但现在已经有STU这样的名称可以定义变量了）</span></span><br></pre></td></tr></table></figure><h1>使用</h1><h2 id="初始化">初始化</h2><ol><li><p>逐一初始化每个成员(定义完变量之后)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">student st;</span><br><span class="line"><span class="built_in">strcpy</span>(st.id,<span class="string">&quot;03101001&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(st.name,<span class="string">&quot;jky&quot;</span>);</span><br><span class="line">st.score=<span class="number">100</span>;</span><br></pre></td></tr></table></figure></li><li><p>整体初始化（只可在定义变量时使用）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student st=&#123;<span class="string">&quot;03101001&quot;</span>,<span class="string">&quot;jky&quot;</span>,<span class="number">100</span>&#125;;</span><br><span class="line">student st=&#123;<span class="string">&quot;03101001&quot;</span>,<span class="string">&quot;jky&quot;</span>&#125;;<span class="comment">//未赋予则score为0，详见下方补充</span></span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>变量类型</th><th>默认值</th></tr></thead><tbody><tr><td>char</td><td>‘\0’</td></tr><tr><td>string</td><td>‘’ 或者NULL</td></tr><tr><td>bool</td><td>False</td></tr><tr><td>指针</td><td>char*为’'或者NULL；其他为0</td></tr><tr><td>int</td><td>0</td></tr></tbody></table><h2 id="赋值">赋值</h2><p>利用=（赋值运算符）</p><ul><li>成员是基本类型，数组：值复制</li><li>成员是指针：地址复制    结果为<strong>两个结构体变量的成员指向同一个内存</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student st1=&#123;<span class="string">&quot;01&quot;</span>,<span class="string">&quot;xiaoli&quot;</span>,<span class="number">90</span>&#125;,st2=&#123;<span class="string">&quot;02&quot;</span>&#125;;</span><br><span class="line">st2=st1;</span><br></pre></td></tr></table></figure><h2 id="访问">访问</h2><p>格式：结构体变量.成员名称</p><h2 id="结构体指针变量">结构体指针变量</h2><h3 id="定义指针变量">定义指针变量</h3><p>格式：结构体类型.成员名称</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">point pt1=&#123;<span class="number">10</span>,<span class="number">10</span>&#125;;</span><br><span class="line">point *p=&amp;pt1;</span><br></pre></td></tr></table></figure><h3 id="引用所指向结构体变量的成员">引用所指向结构体变量的成员</h3><ol><li>先取结构体变量再访问</li></ol><p><code> (*p).x=20</code></p><ol start="2"><li>专用运算符-&gt;</li></ol><p><code>p-&gt;x=20;</code></p><h1>结构体与函数</h1><h2 id="结构体类型作为函数返回值">结构体类型作为函数返回值</h2><ul><li>可返回一个<strong>逻辑整体</strong> 即多个值</li><li>可整体赋值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;point;</span><br><span class="line"><span class="function">point <span class="title">input_point</span><span class="params">()</span></span>&#123;</span><br><span class="line">    point pt;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;pt.x,&amp;pt.y);</span><br><span class="line">    <span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    point pt1=input_point();</span><br><span class="line">    point pt2=input_point();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体类型作为函数形式参数">结构体类型作为函数形式参数</h2><p>注意：若函数目的为更改所定义结构体变量，即实参，应使用指针形式结构体变量</p><p>原因：若使用非指针形式的结构体类型参数，相当于将实参赋值给形参，实参不变；而如果为指针类型，则形参和实参指向同一结构体，实参可被修改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(point *pt,<span class="keyword">int</span> dx,<span class="keyword">int</span> dy)</span></span>&#123;</span><br><span class="line">  pt-&gt;x+=dx;</span><br><span class="line">  pt-&gt;y+=dy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子">例子</h2><p>多关键字排序函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(student st1,student st2)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(student sts[],<span class="keyword">int</span> n)</span><span class="comment">//数组类型本质上就是指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> k=i,j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(compare(st[j],st[k])&gt;<span class="number">0</span>) k=j;</span><br><span class="line">         &#125;<span class="comment">//比较</span></span><br><span class="line">           <span class="keyword">if</span>(k!=i)&#123;</span><br><span class="line">             student st=sts[i];</span><br><span class="line">             sts[i]=sts[k];</span><br><span class="line">             sts[k]=st;</span><br><span class="line">      &#125;<span class="comment">//交换</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
